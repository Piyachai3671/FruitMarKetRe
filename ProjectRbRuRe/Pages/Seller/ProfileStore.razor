@page "/profile-store"
@using ProjectRbRuRe.Data.Models;
@using ProjectRbRuRe.Data.Services;
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@inject LoginService loginService
@inject StoreService storeService
@inject UserService userService
@inject ProvinceService provinceService
@inject AmphoeService amphoeService
@inject TambolService tambolService
@inject NotificationService notificationservice
<ProjectRbRuRe.Pages.NewFolder.NavMenuToLogin></ProjectRbRuRe.Pages.NewFolder.NavMenuToLogin>
@foreach (var Store in ListStores.FindAll(e => e.UserID == UserLogin.UserID))
{
	<EditForm Model="@Store">
		<DataAnnotationsValidator />
		<div class="row">
			<div class="" style="text-align: center;">
				<h3>จัดการร้านค้า</h3>
			</div>


			<div class="row">
				<div class="col-lg-4">
					<label for="">ชื่อร้านค้า</label>
					<InputText @bind-Value="@Store.SellerName" type="text" class="form-control mt-2" maxlength="30" />
					<ValidationMessage For="@(()=>Store.SellerName)" />

					<label for="">รหัสผู้ใช้งาน</label>
					<input value="@UserLogin.Username" disabled type="text" class="form-control mt-2" />
					<p>
						<label for="">รหัสผ่าน</label>
						<div style="position:relative;">
							<InputText @bind-Value="@UserLogin.Password" type="password" class="form-control mt-2" maxlength="30" />
							<i class="fa-sharp fa-solid fa-eye" style="position:absolute;top: 50%; right: 2.5%;transform: translateY(-50%)"></i>
						</div>
						<ValidationMessage For="@(()=>UserLogin.Password)" />
					</p>
					

				</div>

				<div class="col-lg-4">
					<label for="">ที่อยู่</label>
					<InputText @bind-Value="@UserLogin.Address" type="text" class="form-control mt-2" maxlength="255" />
					<ValidationMessage For="@(()=>UserLogin.Address)" />

					<label for="">จังหวัด</label>

					<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="UserLogin.Province"
								Data=@(ListProvince.Select(c => c.pname).Distinct())
								Change=@(args => OnChangeProvince(UserLogin)) />
					<ValidationMessage For="@(()=>UserLogin.Province)" />

					<label for="">อำเภอ</label>

					<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="UserLogin.District" Disabled="@(UserLogin.Province == null)"
								Data=@(ListAmphoes.FindAll(c => c.pcode == IDPCode.pcode).Select(c=>c.aname).Distinct())
								Change=@(args => OnchangeAmphoe(UserLogin)) />
					<ValidationMessage For="@(()=>UserLogin.District)" />

					<label for="">ตำบล</label>

					<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="UserLogin.SubDistrict" Disabled="@(UserLogin.District == null)"
								Data=@(ListTambols.FindAll(c => c.acode == IDACode.acode).Select(c=>c.tname).Distinct())
								Change="@(arg=> OnchangeTambol(UserLogin))" />
					<ValidationMessage For="@(()=>UserLogin.SubDistrict)" />

					<label for="">รหัสไปรษณีย์</label>
					<InputText @bind-Value="@UserLogin.Postcode" type="text" class="form-control mt-2" maxlength="5" />
					<ValidationMessage For="@(()=>UserLogin.Postcode)" />

					<label for="">เบอร์โทรศัพท์</label>
					<InputText @bind-Value="@UserLogin.Tel" type="text" class="form-control mt-2" maxlength="10" />
					<ValidationMessage For="@(()=>UserLogin.Tel)" />
				</div>
				<div class="col-lg-4">
					<div class="form-group">
						<label for="info">รายละเอียดร้านค้า</label>
						<InputTextArea @bind-Value="@Store.SellerDescription" cols="30" rows="15" class="form-control mt-2" placeholder="อธิบายเกี่ยวกับร้านค้า หรือช่องทางติดต่อของคุณ" maxlength="500" />
						<ValidationMessage For="@(()=>Store.SellerDescription)" />
					</div>
				</div>
			</div>
		</div>
		<hr>
		<div class="row">
			<div class="col-lg-6">
				<strong>ภาพโปรไฟล์ร้านค้า</strong>
				<div class="row">
					@if (isLoading == false)
					{
						<img class="mt-3" src="img\@Store.ImgProfile" style=" object-fit:cover; width: 500px; height: 200px; margin-top: 5px;" alt="ยังไม่มีภาพโปรไฟล์">
					}
					@if (isLoading == true) //ถ้ามีการเพิ่มรูป จะทำการแสดงข้อความ
					{
						@foreach (var file in loadedFiles)
						{
							<img class="mt-3" src="img\@Store.ImgProfile" style=" object-fit:cover; width: 500px; height: 200px; margin-top: 5px;">
						}

					}
					<div class="row">
						<div class="col">
							<button class="btn">
								<InputFile class="" OnChange="LoadFiles"></InputFile>
							</button>

						</div>

					</div>

				</div>
			</div>

			<div class="col-lg-6">
				<strong>ภาพปกร้านค้า</strong>
				<div class="row">
					@if (isLoadingCover == false)
					{
						<img class="mt-3" src="img\@Store.ImgCover" style="object-fit: cover; width: 500px; height: 200px; margin-top: 5px;" alt="ยังไม่มีภาพโปรไฟล์">
					}
					@if (isLoadingCover == true) //ถ้ามีการเพิ่มรูป จะทำการแสดงข้อความ
					{
						@foreach (var file in loadedFilesCover)
						{
							<img class="mt-3" src="img/@Store.ImgCover" style="object-fit: cover; width: 500px; height: 200px; margin-top: 5px;">
						}
					}
					<div class="row">
						<InputFile OnChange="LoadFilesCover"></InputFile>
					</div>

				</div>
			</div>
		</div>



		<hr>
		<div class="row mt-2">
			<div class="col">

				<div class="form-group ">
					<label for="">ธนาคาร</label>
					<div class=" mt-2">
						<InputSelect @bind-Value="Store.BankName" class="form-control" style="height:38px; width:550px;">
							<option>เลือกธนาคาร</option>
							<option value="ธนาคารกรุงเทพ">ธนาคารกรุงเทพ</option>
							<option value="ธนาคารกสิกรไทย">ธนาคารกสิกรไทย</option>
							<option value="ธนาคารกรุงไทย">ธนาคารกรุงไทย</option>
							<option value="ธนาคารไทยพาณิชย์">ธนาคารไทยพาณิชย์</option>
							<option value="ธนาคารกรุงศรีอยุธยา">ธนาคารกรุงศรีอยุธยา</option>
							<option value="ธนาคารออมสิน">ธนาคารออมสิน</option>
						</InputSelect>
						<ValidationMessage For="@(()=>Store.BankName)" />
					</div>
				</div>
			</div>

			<div class="col">
				<label for="">ชื่อบัญชีธนาคาร</label>
				<InputText @bind-Value="@Store.AccountName" type="text" class="form-control mt-2" maxlength="50" />
				<ValidationMessage For="@(()=>Store.AccountName)" />
			</div>
			<div class="col">
				<label for="">เลขบัญชีธนาคาร</label>
				<InputText @bind-Value="@Store.AccountNumber" type="text" class="form-control mt-2" maxlength="10" />
				<ValidationMessage For="@(()=>Store.AccountNumber)" />
			</div>
		</div>

		<div class="mt-3 mb-3" style="text-align: center;">
			<button type="button" class="btn btn-success" @onclick="OnClickEditStore">บันทึก</button>
		</div>
	</EditForm>
}



@code {
	private User? UserLogin = new();
	private List<Store> ListStores = new List<Store>();
	public List<User> ListUsers = new List<User>();

	private List<province> ListProvince = new List<province>();
	private province ModelProvince = new();
	private List<Amphoe> ListAmphoes = new List<Amphoe>();
	private Amphoe ModelAmphoe = new();
	private List<tambol> ListTambols = new List<tambol>();
	private tambol ModelTambol = new();

	protected override async Task OnInitializedAsync()
	{
		var Users = await userService.GetUserAsync();
		foreach (var user in Users)
		{
			ListUsers.Add(new User().ToUi(user));
		}
		UserLogin = new User().ToUi(loginService.UserToLogin); //แปลงไปใช้ของ UserToUI

		var Stores = await storeService.GetStoresAsync();
		foreach (var Store in Stores)
		{
			ListStores.Add(new Store().ToUi(Store));
		}

		var Provinces = await provinceService.GetProvinceAsync();
		foreach (var Province in Provinces)
		{
			ListProvince.Add(new province().ToUi(Province));
		}
		var Amphoes = await amphoeService.GetAmphoeAsync();
		foreach (var Amphoe in Amphoes)
		{
			ListAmphoes.Add(new Amphoe().ToUi(Amphoe));
		}
		var Tambols = await tambolService.GetTambolAsync();
		foreach (var Tambol in Tambols)
		{
			ListTambols.Add(new tambol().ToUi(Tambol));
		}
	}


	private void ShowNotificationSuccessEdit()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "แก้ไขสำเร็จ",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}
	private void ShowNotificationEditFail()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "กรุณากรอกข้อมูลให้ถูกต้อง !",
				Detail = "",
				Duration = 5000,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}

	private List<IBrowserFile> loadedFiles = new();
	private long maxFileSize = (1024 * 10) * 1024;
	private int maxAllowedFiles = 3;
	private bool isLoading;
	public string CurrentImg = "";
	public string CurrentPathImg = "";
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		var Store = ListStores.Find(e => e.UserID == UserLogin.UserID);
		//CurrentImg = Store.ImgProfile;
		isLoading = true;
		loadedFiles.Clear();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{
				loadedFiles.Add(file);
				Console.WriteLine(Path.GetRandomFileName());
				var trustedFileNameForFileStorage = Path.GetRandomFileName() + file.Name;
				Store.ImgProfile = trustedFileNameForFileStorage;
				var path = Path.Combine(
							"wwwroot", "img", trustedFileNameForFileStorage);
				CurrentPathImg = path;
				await using FileStream fs = new(path, FileMode.Create);
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}

		}
		isLoading = false;
	}

	private List<IBrowserFile> loadedFilesCover = new();
	private bool isLoadingCover;
	public string CurrentImgCover = "";
	public string CurrentPathImgCover = "";
	private async Task LoadFilesCover(InputFileChangeEventArgs e)
	{
		var Store = ListStores.Find(e => e.UserID == UserLogin.UserID);
		isLoadingCover = true;
		loadedFilesCover.Clear();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{
				loadedFilesCover.Add(file);
				Console.WriteLine(Path.GetRandomFileName());
				var trustedFileNameForFileStorage = Path.GetRandomFileName() + file.Name;
				Store.ImgCover = trustedFileNameForFileStorage;
				var path = Path.Combine(
							"wwwroot", "img", trustedFileNameForFileStorage);
				CurrentPathImgCover = path;
				await using FileStream fs = new(path, FileMode.Create);
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}

		}
		isLoadingCover = false;
	}
	private async Task OnClickEditStore()
	{
		var StoreInput = ListStores.Find(e => e.UserID == UserLogin.UserID);
		string InputSellerName = StoreInput.SellerName;
		string InputPassword = UserLogin.Password;

		string InputAddress = UserLogin.Address;
		string InputPostcode = UserLogin.Postcode;
		string InputTel = UserLogin.Tel;

		string InputDescription = StoreInput.SellerDescription;

		string InputImgProfile = StoreInput.ImgProfile;
		string InputImgCover = StoreInput.ImgCover;

		string InputBankName = StoreInput.BankName;
		string InputAccountName = StoreInput.AccountName;
		string InputAccountNumber = StoreInput.AccountNumber;


		if (InputSellerName == null ||
			UserLogin.Password == null ||

			UserLogin.Address == null ||
			UserLogin.Province == null ||
			UserLogin.District == null ||
			UserLogin.SubDistrict == null ||
			UserLogin.Postcode == null ||
			UserLogin.Tel == null ||

			InputBankName == null ||
			InputAccountName == null ||
			InputAccountNumber == null
		)
		{
			ShowNotificationEditFail();
			return;
		}
		if (InputSellerName.Length < 2 ||
			InputPassword.Length < 6 ||


			InputAddress.Length < 1 ||
			InputPostcode.Length != 5 ||
			InputTel.Length != 10 ||

			InputAccountName.Length < 2 ||
			InputAccountNumber.Length != 10
		)
		{
			ShowNotificationEditFail();
			return;
		}

		if (InputSellerName != null ||
			UserLogin.Password != null ||

			UserLogin.Address != null ||
			UserLogin.Province != null ||
			UserLogin.District != null ||
			UserLogin.SubDistrict != null ||
			UserLogin.Postcode != null ||
			UserLogin.Tel != null ||

			InputBankName != null ||
			InputAccountName != null ||
			InputAccountNumber != null
		)
		{
			foreach (var Store in ListStores.FindAll(e => e.UserID == UserLogin.UserID))
			{

				Store.SellerName = Store.SellerName;
				Store.SellerDescription = Store.SellerDescription;
				Store.BankName = Store.BankName;
				Store.AccountName = Store.AccountName;
				Store.AccountNumber = Store.AccountNumber;
				var a = new Store().ToTable(Store); //นำค่ามาเก็บใน a แต่ยังไม่บันทึกข้อมูล
				storeService.EditStore(a); //บันทึกข้อมูล
				ShowNotificationSuccessEdit();

				var EditUser = new User().ToTable(UserLogin); //นำค่ามาเก็บใน a แต่ยังไม่บันทึกข้อมูล
				userService.EditUser(EditUser); //บันทึกข้อมูล

				var Stores1 = await storeService.GetStoresAsync();
				ListStores.Clear();
				foreach (var Store1 in Stores1)
				{
					ListStores.Add(new Store().ToUi(Store1));
				}
			}
		}
		
	}
	private province IDPCode = new();
	private void OnChangeProvince(User ID)
	{

		UserLogin.District = null;
		UserLogin.SubDistrict = null;

		var provinceSelect = ListProvince.Find(e => e.pname == ID.Province);
		IDPCode = provinceSelect;

	}
	private Amphoe IDACode = new();
	private void OnchangeAmphoe(User ID)
	{
		UserLogin.SubDistrict = null;
		var AmphoeSelect = ListAmphoes.Find(e => e.aname == ID.District);
		IDACode = AmphoeSelect;

	}
	private tambol IDTCode = new();
	private void OnchangeTambol(User ID)
	{
		var TambolSelect = ListTambols.Find(e => e.tname == ID.SubDistrict);
		IDTCode = TambolSelect;

	}
}