@page "/register-seller"
@using ProjectRbRuRe.Data.Models
@using ProjectRbRuRe.Data.Services
@inject UserService userService
@inject StoreService storeService
@inject ProvinceService provinceService
@inject AmphoeService amphoeService
@inject TambolService tambolService
@inject NavigationManager NavigationManager
@inject NotificationService notificationservice
<div class="row mt-3">
	<div class="col-sm-6 mt-2  ">
		<div class="logo  text-center">
			<img src="img/RegisterSeller1.png" class=" w-75 size  rounded-circle"style="position:relative; top:200px;" >
		</div>
	</div>

	<div class="col-sm-6 mt-3 ">
		<div class="card ">
			<div class="card-body">
				<h2 style="color:#003866;text-align:center;">ร้านค้า</h2>

				<EditForm Model="ModelUser">
					<DataAnnotationsValidator />
					
					<div class="form-group mt-2">
						<label for="email">รหัสผู้ใช้</label>
						<InputText @bind-Value="ModelUser.Username" type="text" class="form-control" placeholder="รหัสผู้ใช้" maxlength="30" />
						<ValidationMessage For="@(()=>ModelUser.Username)" />
					</div>
					<div class="form-group mt-2">
						<label for="password">รหัสผ่าน</label>
						<InputText @bind-Value="ModelUser.Password" type="password" class="form-control" placeholder="รหัสผ่าน" maxlength="30" />
						<ValidationMessage For="@(()=>ModelUser.Password)" />
					</div>
					<div class="form-group mt-2">
						<label for="seller_tel">เบอร์โทรศัพท์</label>
						<InputText @bind-Value="ModelUser.Tel" class="form-control" placeholder="เบอร์โทรศัพท์" maxlength="10" type="text"  />
						<ValidationMessage For="@(()=>ModelUser.Tel)" />
					</div>
					<div class="form-group mt-2">
						<label for="seller_tel">ที่อยู่</label>
						<InputTextArea @bind-Value="ModelUser.Address" class="form-control" placeholder="ที่อยู่" cols="30" rows="3" type="text" maxlength="255" />
						<ValidationMessage For="@(()=>ModelUser.Address)" />
					</div>
					<div class="form-group mt-2">
						<label for="province">จังหวัด</label>
						<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="ModelProvince.pname"
										Data=@(ListProvince.Select(c => c.pname).Distinct())
										Change=@(args => OnChangeProvince(ModelProvince)) />
						<ValidationMessage For="@(()=>ModelUser.Province)" />
					</div>
					<div class="form-group mt-2">
						<label for="district">อำเภอ</label>
						<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="ModelAmphoe.aname" Disabled="@(ModelProvince.pname == null)"
										Data=@(ListAmphoes.FindAll(c => c.pcode == IDPCode.pcode).Select(c=>c.aname).Distinct())
										Change=@(args => OnchangeAmphoe(ModelAmphoe)) />
						<ValidationMessage For="@(()=>ModelUser.District)" />
					</div>
					<div class="form-group mt-2">
						<label for="subdistrict">ตำบล</label>
						<RadzenDropDown AllowClear="false" TValue="string" Class="w-100" @bind-Value="ModelTambol.tname"Disabled="@(ModelAmphoe.aname == null)"
										Data=@(ListTambols.FindAll(c => c.acode == IDACode.acode).Select(c=>c.tname).Distinct())
										Change="@(arg=> OnchangeTambol(ModelTambol))" />
						<ValidationMessage For="@(()=>ModelUser.SubDistrict)" />
					</div>
					<div class="form-group mt-2">
						<label for="postcode">รหัสไปรษณีย์</label>
						<InputText @bind-Value="ModelUser.Postcode" class="form-control" placeholder="รหัสไปรษณีย์" maxlength="5" type="text" />
						<ValidationMessage For="@(()=>ModelUser.Postcode)" />
					</div>
				</EditForm>

				<EditForm Model="ModelStore">
					<DataAnnotationsValidator />
					<div class="form-group mt-2">
						<label for="namestore">ชื่อร้านค้า</label>
						<InputText @bind-Value="ModelStore.SellerName" class="form-control" placeholder="ชื่อร้านค้า" type="text" maxlength="30" />
						<ValidationMessage For="@(()=>ModelStore.SellerName)" />
					</div>
				</EditForm>
				<div style="text-align: center;">
					<button type="submit" class="btn btn-primary mt-3 mr-3" @onclick="OnClickAddStore">สมัครสมาชิก</button>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private Store ModelStore = new();
	private List<Store> ListStores = new List<Store>();
	private User ModelUser = new();
	private List<User> ListUsers = new List<User>();
	private List<province> ListProvince = new List<province>();
	private province ModelProvince = new();
	private List<Amphoe> ListAmphoes = new List<Amphoe>();
	private Amphoe ModelAmphoe = new();
	private List<tambol> ListTambols = new List<tambol>();
	private tambol ModelTambol = new();
	protected override async Task OnInitializedAsync()
	{
		//ListUsers = await userService.GetUserAsync();
		var Users = await userService.GetUserAsync();
		foreach (var user in Users)
		{
			ListUsers.Add(new User().ToUi(user));
		}
		var Stores = await storeService.GetStoresAsync();
		foreach (var Store in Stores)
		{
			ListStores.Add(new Store().ToUi(Store));
		}
		
		var Provinces = await provinceService.GetProvinceAsync();
		foreach (var Province in Provinces)
		{
			ListProvince.Add(new province().ToUi(Province));
		}
		var Amphoes = await amphoeService.GetAmphoeAsync();
		foreach (var Amphoe in Amphoes)
		{
			ListAmphoes.Add(new Amphoe().ToUi(Amphoe));
		}
		var Tambols = await tambolService.GetTambolAsync();
		foreach (var Tambol in Tambols)
		{
			ListTambols.Add(new tambol().ToUi(Tambol));
		}
	}

	private async Task OnClickAddStore()
	{
		var CountUser = ListUsers.Count();
		//string InputUsername = ModelUser.Username;
		//string InputPassword = ModelUser.Password;
		//string InputTel = ModelUser.Tel;
		//string InputAddress = ModelUser.Address;



		//string InputPostCode = ModelUser.Postcode;
		//string InputStoreName = ModelStore.SellerName;

		//if (ModelUser.Username == null ||
		//	ModelUser.Password == null ||
		//	ModelUser.Tel == null ||
		//	ModelUser.Address == null ||

		//	ModelProvince.pname == null ||
		//	ModelAmphoe.aname == null ||
		//	ModelTambol.tname == null ||

		//	ModelUser.Postcode == null ||

		//	ModelStore.SellerName == null)
		//{
		//	ShowNotificationInputFail();
		//	return;
		//}
		//if (InputUsername.Length < 6 || /*InputUsername.Length > 30 ||*/
		//	InputPassword.Length < 6 || /*InputPassword.Length > 30 ||*/
		//	InputTel.Length != 10 ||
		//	InputAddress.Length < 1 ||
		//	InputPostCode.Length < 5 ||
		//	InputStoreName.Length < 2  /*InputStoreName.Length > 30*/
		//)
		//{
		//	ShowNotificationInputFail();
		//	return;
		//}
		//if (ModelUser.Username != null ||
		//	ModelUser.Password != null ||
		//	ModelUser.Tel != null ||
		//	ModelUser.Address != null ||

		//	ModelProvince.pname != null ||
		//	ModelAmphoe.aname != null ||
		//	ModelTambol.tname	 != null ||

		//	ModelUser.Postcode != null ||

		//	ModelStore.SellerName != null
		//)
		//{

			ModelUser.Permission = "s";
			ModelUser.StoreName = ModelStore.SellerName;
			ModelUser.Province = ModelProvince.pname;
			ModelUser.District = ModelAmphoe.aname;
			ModelUser.SubDistrict = ModelTambol.tname;

			var AddUser = new User().ToTable(ModelUser);
			userService.AddNewUser(AddUser); //บันทึกข้อมูล

			ModelUser.Username = "";
			ModelUser.Password = "";
			ModelUser.Tel = "";
			ModelUser.Address = "";
			ModelUser.Province = "";
			ModelUser.District = "";
			ModelUser.SubDistrict = "";
			ModelUser.Postcode = "";

			ModelStore.UserID = CountUser + 1;
			var AddStore = new Store().ToTable(ModelStore);
			storeService.AddNewStore(AddStore); //บันทึกข้อมูล
			ModelStore.SellerName = "";
			OnGoPageToLogin();
		//}



		
	}
	private void OnGoPageToLogin()
	{
		NavigationManager.NavigateTo($"/Login");
	}
	private province IDPCode = new();
	private void OnChangeProvince(province ID)
	{
		var provinceSelect = ListProvince.Find(e => e.pname == ID.pname);
		IDPCode = provinceSelect;
	}
	private Amphoe IDACode = new();
	private void OnchangeAmphoe(Amphoe ID)
	{
		var AmphoeSelect = ListAmphoes.Find(e => e.aname == ID.aname);
		IDACode = AmphoeSelect;
	}
	private tambol IDTCode = new();
	private void OnchangeTambol(tambol ID)
	{
		var TambolSelect = ListTambols.Find(e => e.tname == ID.tname);
		IDTCode = TambolSelect;
	}
	private void ShowNotificationInputFail()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "กรุณากรอกข้อมูลให้ถูกต้อง !",
				Detail = "",
				Duration = 5000,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}

}